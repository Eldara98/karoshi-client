#!/bin/bash

source /opt/karoshi/linuxclientsetup/variables

#function create_entries
#	$1 is mount name
#	$2 is mount path
#	$3 is icon
function create_entries {
	filename=`tr '[:upper:] ' '[:lower:]-' <<< "$1"`
	#Desktop and Menu
	echo "[Desktop Entry]
Version=1.0
Type=Application
Terminal=false
Exec=exo-open --launch FileManager $2
Name=$1
Icon=$3
Categories=X-XFCE;X-Xfce-Toplevel;Karoshi;
OnlyShowIn=XFCE;" | tee ~/Desktop/karoshi-"$filename".desktop > ~/.local/share/applications/karoshi-"$filename".desktop
}

######################
#Extract configuration
######################
[ -f ~/network/home/.configuration.tar.gz ] && tar -x -C ~ -f ~/network/home/.configuration.tar.gz
[ -f ~/network/home/.desktop-icons.tar.gz ] && tar -x -C ~ -f ~/network/home/.desktop-icons.tar.gz

[ ! -d ~/.local/share/applications ] && mkdir -p ~/.local/share/applications
[ ! -d ~/Desktop ] && mkdir ~/Desktop

##################
#create user.js for default Firefox settings
##################
if which firefox >/dev/null && [ -d ~/.mozilla/firefox ]; then
	firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
	if [[ "$firefox_profile" ]] && [ -d ~/.mozilla/firefox/"$firefox_profile" ]; then
		#Apply CA certificate
		if [ -f /opt/karoshi/linuxclientsetup/cacert.pem ]; then
			certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/linuxclientsetup/cacert.pem -d ~/.mozilla/firefox/"$firefox_profile"
		fi
	
		#Default download directory
		echo "user_pref('browser.download.lastDir', '~/network/home/');" > ~/.mozilla/firefox/"$firefox_profile"/user.js
	
		#Give clipboard capability to Moodle and other sites
		if [ -f /opt/karoshi/linuxclientsetup/allow_clipboard_sites ]; then
			echo "user_pref('capability.policy.allowclipboard.sites', '` < /opt/karoshi/linuxclientsetup/allow_clipboard_sites`');
user_pref('capability.policy.allowclipboard.Clipboard.cutcopy', 'allAccess');
user_pref('capability.policy.allowclipboard.Clipboard.paste', 'allAccess');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
		fi
	
		#Remove updated messages and extension checking
		firefox_version=`firefox --version | sed 's/^[^0-9]*//'`
		echo "user_pref('browser.startup.homepage_override.mstone', '$firefox_version');
user_pref('extensions.lastAppVersion', '$firefox_version');
user_pref('extensions.lastPlatformVersion', '$firefox_version');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js

		#Cache settings
		echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
	
		#Proxy server
		if [ "$PROXYSERVER" ]; then
			echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');
user_pref('browser.startup.homepage', '$PROXYSERVER.$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
		else
			#For no proxy, we want the homepage to be about:home
			echo "user_pref('browser.startup.homepage', 'about:home');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
		fi
	
		#Set up Kerberos
		if [ "$DOMAINTYPE" == samba4 ] || [ "$DOMAINTYPE" == samba4_winbind ]; then
			echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
		fi
	fi
fi

##################
#create user.js for default Thunderbird settings
##################
if which thunderbird >/dev/null && [ -d ~/.thunderbird ]; then
	thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.thunderbird/profiles.ini`
	if [[ "$thunderbird_profile" ]] && [ -d ~/.thunderbird/"$thunderbird_profile" ]; then
		#Apply CA certificate
		if [ -f /opt/karoshi/linuxclientsetup/cacert.pem ]; then
			certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/linuxclientsetup/cacert.pem -d ~/.thunderbird/"$thunderbird_profile"
		fi
		
		#Remove updated messages and extension checking
		thunderbird_version=`thunderbird --version | sed 's/^[^0-9]*//'`
		echo "user_pref('extensions.lastAppVersion', '$thunderbird_version');
user_pref('extensions.lastPlatformVersion', '$thunderbird_version');
user_pref('mailnews.start_page_override.mstone', '$thunderbird_version');" >> ~/.thunderbird/"$thunderbird_profile"/user.js

		#Cache settings
		echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.thunderbird/"$thunderbird_profile"/user.js
		
		#Proxy server
		if [ "$PROXYSERVER" ]; then
			echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
		fi
		
		#Set up Kerberos
		if [ "$DOMAINTYPE" == samba4 ] || [ "$DOMAINTYPE" == samba4_winbind ]; then
			echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
		fi
		
		if [ "$MAILSERVER" ]; then
			user_fullname=$(getent passwd $USER | cut -d: -f5 | cut -d, -f1)
		
			echo "user_pref('mail.identity.id1.useremail', '$USER@$DNSSUFFIX');
user_pref('mail.identity.id1.valid', true);
user_pref('mail.identity.id1.fullName', '$user_fullname');
user_pref('mail.identity.id1.smtpServer', 'smtp1');

user_pref('mail.server.server1.authMethod', 5);
user_pref('mail.server.server1.check_new_mail', true);
user_pref('mail.server.server1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.server.server1.login_at_startup', true);
user_pref('mail.server.server1.name', '$USER@$DNSSUFFIX');
user_pref('mail.server.server1.socketType', 2);
user_pref('mail.server.server1.storeContractID', '@mozilla.org/msgstore/berkeleystore;1');
user_pref('mail.server.server1.type', 'imap');
user_pref('mail.server.server1.userName', '$USER');

user_pref('mail.smtpserver.smtp1.authMethod', 5);
user_pref('mail.smtpserver.smtp1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.smtpserver.smtp1.port', 25);
user_pref('mail.smtpserver.smtp1.try_ssl', 2);
user_pref('mail.smtpserver.smtp1.username', '$USER');
user_pref('mail.smtpservers', 'smtp1');" >> ~/.thunderbird/"$thunderbird_profile"/user.js

			#Start in Inbox by default
			echo '{"rev":0,"windows":[{"type":"3pane","tabs":{"rev":0,"selectedIndex":0,"tabs":[{"mode":"folder","state":{"folderURI":"imap://'"$USER@$DNSSUFFIX"'/INBOX","folderPaneVisible":true,"messagePaneVisible":true,"firstTab":true},"ext":{"quickFilter":{"filterValues":{"text":{"text":null,"states":{"sender":true,"recipients":true,"subject":true}}},"visible":true}}}]}}]}' > ~/.thunderbird/"$thunderbird_profile"/session.json
		fi
		
		#Set up LDAP address book
		base_dn="cn=Users"$(sed 's/\(\.\|^\)/,dc=/g' <<< "$DNSSUFFIX")
		echo "user_pref('ldap_2.autoComplete.directoryServer', 'ldap_2.servers.Karoshi');
user_pref('ldap_2.autoComplete.useDirectory', true);
user_pref('ldap_2.servers.Karoshi.auth.dn', '');
user_pref('ldap_2.servers.Karoshi.auth.saslmech', '');
user_pref('ldap_2.servers.Karoshi.description', 'Karoshi');
user_pref('ldap_2.servers.Karoshi.filename', 'ldap.mab');
user_pref('ldap_2.servers.Karoshi.maxHits', 100);
user_pref('ldap_2.servers.Karoshi.uri', 'ldap://$PDC.$DNSSUFFIX/$base_dn??sub?(&(mail=*)(displayName=*))');
user_pref('ldap_2.servers.default.attrmap.DisplayName', 'displayname,cn,commonname');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
	fi
fi

##################
#Create icons
##################
mountpoints=false
> ~/.gtk-bookmarks

#Create home icon first so that it appears first on the desktop
mountpath=`mount | grep "$USER/network/home type cifs" | cut -d' ' -f3`
if [ "$mountpath" ]; then
	mountname=`basename $mountpath`
	create_entries "$mountname" "$mountpath" folder-home
	#Thunar
	echo "file://$mountpath $mountname" >> ~/.gtk-bookmarks
	mountpoints=true
fi

#Create icons to other mounted network shares
for mountpath in `mount | grep "$USER/network/[^[:blank:]]* type cifs" | cut -d' ' -f3 | sort`; do
	mountname=`basename $mountpath`
	if [ $mountname != home ] && [ $mountname != netlogon ]; then
		create_entries "$mountname" "$mountpath" folder-publicshare
		#Thunar
		echo "file://$mountpath $mountname" >> ~/.gtk-bookmarks
		mountpoints=true
	fi
done

#Create folder icon if no mount points
if ! $mountpoints; then
	create_entries "File Manager" ~ folder-system
fi

#Copy in default icons
[ -d /opt/karoshi/linuxclientsetup/desktop_icons/all ] && cp -rf /opt/karoshi/linuxclientsetup/desktop_icons/all/* ~/Desktop

#Copy in extra icons for groups
pri_group=`id -g -n`
[ -d /opt/karoshi/linuxclientsetup/desktop_icons/$pri_group ] && cp -rf /opt/karoshi/linuxclientsetup/desktop_icons/$pri_group/* ~/Desktop

##################
#Miscellaneous things
##################
#Copy in admin_skel
if [ $pri_group == itadmin -o $pri_group == tech ] && [ -d /opt/karoshi/linuxclientsetup/admin_skel ]; then
	cp -rf /opt/karoshi/linuxclientsetup/admin_skel/.config ~
fi

#Set default directory for terminal emulator and file manager to network/home
if [ -d ~/network/home ]; then
	mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml
	cp -n /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml
	sed -i 's@"exo-open --launch \(TerminalEmulator\|FileManager\)"@"exo-open --launch \1 --working-directory network/home"@' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml
	
	cp -n /usr/share/applications/exo-terminal-emulator.desktop ~/.local/share/applications
	sed -i 's@^Exec=exo-open --launch TerminalEmulator$@Exec=exo-open --launch TerminalEmulator --working-directory network/home@' ~/.local/share/applications/exo-terminal-emulator.desktop
fi

#Disable Firefox crash reporter
export MOZ_CRASHREPORTER_DISABLE=1

#Create rednotebook link
[ ! -d ~/network/home/.rednotebook ] && mkdir ~/network/home/.rednotebook
[ ! -d ~/.rednotebook ] && ln -s network/home/.rednotebook ~/.rednotebook

#Set permissions on icons
chmod 0700 ~/Desktop/*.desktop
