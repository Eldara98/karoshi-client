#!/bin/bash

#Copyright (C) 2013 Robin McCorkell

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

#function create_entries
#	$1 is mount name
#	$2 is mount path
#	$3 is icon
function create_entries {
	filename=`tr '[:upper:] ' '[:lower:]-' <<< "$1"`
	command="exo-open"
	iconname="$1"
	if [[ $sudo_open ]]; then
		iconname="Admin $iconname"
		command="gksudo -D '$iconname' -- exo-open"
	fi
	echo "Generating desktop and menu entry: $1"
	#Desktop and Menu
	echo "[Desktop Entry]
Version=1.0
Type=Application
Terminal=false
Exec=$command --launch FileManager --working-directory $2
Name=$iconname
Icon=$3
Categories=X-XFCE;X-Xfce-Toplevel;Karoshi;
OnlyShowIn=XFCE;" | tee ~/Desktop/karoshi-"$filename".desktop > ~/.local/share/applications/karoshi-"$filename".desktop
}

#####################
#All users
#####################

#Detect an administrator
is_admin=false
groups=( $(id -nG) )
for group in "${groups[@]}"; do
	if [[ $group == "admin" ]] || [[ $group == "sudo" ]] || [[ $group == "tech" ]]; then
		echo "Detected admin user"
		is_admin=true
		break
	fi
done
if [[ $(id -nu) == "root" ]]; then
	is_admin=true
fi

#Detect a domain user
is_domain=false
if [[ $(id -u) -ge 1000 ]] && [[ $(id -u) -ne 65534 ]]; then
	echo "Detected domain user"
	is_domain=true
fi

#Detect offline home area
offline_home_exists=false
if $is_domain && [[ $(mount | grep "on $HOME/offline-home") ]]; then
	echo "Detected offline home area"
	offline_home_exists=true
fi

#Exit if already logged in
if [[ $(pmvarrun -u "$(id -nu)" -o 0) -gt 1 ]]; then
	echo "User already logged in - exiting"
	exit 0
fi

#Create required folders
[[ ! -d ~/Desktop ]] && mkdir ~/Desktop
[[ ! -d ~/.local/share/applications ]] && mkdir -p ~/.local/share/applications
[[ ! -d ~/.config/autostart ]] && mkdir -p ~/.config/autostart
[[ -d ~/.config/karoshi ]] || mkdir -p ~/.config/karoshi

#Clear Karoshi icons from desktop, menu and autostart
find ~/Desktop ~/.local/share/applications ~/.config/autostart -name 'karoshi-*.desktop' -delete

######################
#Domain/local users
######################

if $is_domain; then
	###############
	#Domain user
	###############

	offline_home_escape=$(sed 's/ /%20/g' <<< ~/offline-home)
	#Delete references to offline-home in .gtk-bookmarks
	if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks && ! $offline_home_exists; then
		sed -i "\@^file://$offline_home_escape @ d" ~/.gtk-bookmarks
	fi

	if karoshi-manage-flags get offline_mode >/dev/null; then
		if $offline_home_exists; then
			alternate_home="offline-home"

			create_entries "Home" "$HOME/offline-home" folder-home

			#Add shortcut to offline-home in .gtk-bookmarks
			if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks; then
				sed -i "s@^file://$offline_home_escape .*@file://$offline_home_escape Home@" ~/.gtk-bookmarks
			else
				echo "file://$offline_home_escape Home" >> ~/.gtk-bookmarks
			fi
		else
			echo "WARNING: Unable to find offline home area" >&2
			create_entries "Home" ~ folder-home
		fi
	else
		if $offline_home_exists; then
			echo "Found offline home area while online"
			create_entries "Offline Home" ~/offline-home folder-home

			if [[ -f ~/.gtk-bookmarks ]] && grep -q "^file://$offline_home_escape " ~/.gtk-bookmarks; then
				sed -i "s@^file://$offline_home_escape .*@file://$offline_home_escape Offline Home@" ~/.gtk-bookmarks
			else
				echo "file://$offline_home_escape Offline Home" >> ~/.gtk-bookmarks
			fi
		fi

		#Create home icon first so that it appears first on the desktop
		if [[ $(mount | grep "^[^ ]* on $HOME/network/home type cifs") ]]; then
			echo "Domain home area found"
			create_entries "home" "$HOME/network/home" folder-home

			alternate_home="network/home"
		else
			echo "No domain home area found"
			create_entries "Home" ~ folder-home
		fi

		#Create icons to other mounted network shares
		for mountpath in `mount | grep "^[^ ]* on $HOME/network/[^ ]* type cifs" | cut -d' ' -f3 | sort`; do
			mountname=`basename $mountpath`
			if [[ $mountname != home ]]; then
				create_entries "$mountname" "$mountpath" folder-publicshare
			fi
		done
	fi

	#Add file manager entry to / if administrator
	if $is_admin; then
		sudo_open=true
		create_entries "File Manager" / folder-system
		unset sudo_open
	fi

	#Copy in default icons
	if [[ -d /opt/karoshi/desktop-icons/all ]]; then
		find /opt/karoshi/desktop-icons/all -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~/Desktop
	fi

	#Copy in extra icons for groups
	pri_group=`id -gn`
	if [[ -d /opt/karoshi/desktop-icons/$pri_group ]]; then
		find /opt/karoshi/desktop-icons/$pri_group -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~/Desktop
	fi

	if [[ $alternate_home ]]; then
		#Create rednotebook link
		[[ -d ~/$alternate_home/rednotebook ]] || mkdir ~/"$alternate_home"/rednotebook
		[[ -d ~/.rednotebook ]] || ln -sT "$alternate_home"/rednotebook ~/.rednotebook

		[[ -f ~/$alternate_home/.configuration.tar.gz ]] && tar -x -C ~ -f ~/"$alternate_home"/.configuration.tar.gz

		[[ -f ~/$alternate_home/.desktop-icons.tar.gz ]] && tar -x -C ~ -f ~/"$alternate_home"/.desktop-icons.tar.gz
		if [[ $alternate_home != "offline-home" ]] && $offline_home_exists; then
			[[ -f ~/offline-home/.desktop-icons.tar.gz ]] && tar -xk -C ~ -f ~/offline-home/.desktop-icons.tar.gz
		fi

		#Set default directory for terminal emulator and file manager to $alternate_home
		[[ -d ~/.config/xfce4/xfconf/xfce-perchannel-xml ]] || mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml
		cp -n /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml
		sed -i 's@"exo-open --launch \(TerminalEmulator\|FileManager\)[^"]*"@"exo-open --launch \1 --working-directory '"'$alternate_home'"'"@' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml

		cp -n /usr/share/applications/exo-terminal-emulator.desktop ~/.local/share/applications
		sed -i 's@^Exec=exo-open --launch TerminalEmulator.*@Exec=exo-open --launch TerminalEmulator --working-directory '"'$alternate_home'"'@' ~/.local/share/applications/exo-terminal-emulator.desktop
	fi

	#Clear any sessions
	[[ -e ~/.cache/sessions ]] && rm -rf ~/.cache/sessions
	mkdir -p ~/.cache/sessions

	#create user.js for default Firefox settings
	if which firefox >/dev/null && [[ -d ~/.mozilla/firefox ]]; then
		firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
		if [[ $firefox_profile ]] && [[ -d ~/.mozilla/firefox/$firefox_profile ]]; then
			echo "Found Firefox profile: $firefox_profile"
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				echo "Installing cacert.pem for Firefox"
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.mozilla/firefox/"$firefox_profile"
			fi

			#Default download directory
			if [[ $alternate_home ]]; then
				echo "user_pref('browser.download.lastDir', '~/$alternate_home');" > ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi

			#Give clipboard capability to Moodle and other sites
			if [[ -f /opt/karoshi/allow_clipboard_sites ]]; then
				echo "user_pref('capability.policy.allowclipboard.sites', '` < /opt/karoshi/allow_clipboard_sites`');
user_pref('capability.policy.allowclipboard.Clipboard.cutcopy', 'allAccess');
user_pref('capability.policy.allowclipboard.Clipboard.paste', 'allAccess');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi

			#Remove updated messages and extension checking
			firefox_version=`firefox --version | sed 's/^[^0-9]*//'`
			echo "user_pref('browser.startup.homepage_override.mstone', '$firefox_version');
user_pref('extensions.lastAppVersion', '$firefox_version');
user_pref('extensions.lastPlatformVersion', '$firefox_version');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js

			#Cache settings
			echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.mozilla/firefox/"$firefox_profile"/user.js

			#Proxy server
			if [[ $PROXYSERVER ]]; then
				echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');
user_pref('browser.startup.homepage', '$PROXYSERVER.$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			else
				#For no proxy, we want the homepage to be about:home
				echo "user_pref('browser.startup.homepage', 'about:home');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi

			#Set up Kerberos
			if [[ $DOMAINTYPE == samba4 ]] || [[ $DOMAINTYPE == samba4_winbind ]]; then
				echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi
		fi
	fi

	#create user.js for default Thunderbird settings
	if which thunderbird >/dev/null && [[ -d ~/.thunderbird ]]; then
		thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.thunderbird/profiles.ini`
		if [[ $thunderbird_profile ]] && [[ -d ~/.thunderbird/$thunderbird_profile ]]; then
			echo "Found Thunderbird profile: $thunderbird_profile"
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				echo "Installing cacert.pem for Thunderbird"
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.thunderbird/"$thunderbird_profile"
			fi

			#Remove updated messages and extension checking
			thunderbird_version=`thunderbird --version | sed 's/^[^0-9]*//'`
			echo "user_pref('extensions.lastAppVersion', '$thunderbird_version');
user_pref('extensions.lastPlatformVersion', '$thunderbird_version');
user_pref('mailnews.start_page_override.mstone', '$thunderbird_version');" >> ~/.thunderbird/"$thunderbird_profile"/user.js

			#Cache settings
			echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.thunderbird/"$thunderbird_profile"/user.js

			#Proxy server
			if [[ $PROXYSERVER ]]; then
				echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
			fi

			#Set up Kerberos
			if [[ $DOMAINTYPE == samba4 ]] || [[ $DOMAINTYPE == samba4_winbind ]]; then
				echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
			fi

			if [[ $MAILSERVER ]]; then
				user_fullname=$(getent passwd $USER | cut -d: -f5 | cut -d, -f1)
				echo "Using $user_fullname as real name for user email"

				echo "user_pref('mail.identity.id1.useremail', '$USER@$DNSSUFFIX');
user_pref('mail.identity.id1.valid', true);
user_pref('mail.identity.id1.fullName', '$user_fullname');
user_pref('mail.identity.id1.smtpServer', 'smtp1');
user_pref('mail.identity.id1.archive_enabled', false);
user_pref('mail.identity.id1.draft_folder', 'imap://$USER@mail.$DNSSUFFIX/Drafts');
user_pref('mail.identity.id1.drafts_folder_picker_mode', '0');
user_pref('mail.identity.id1.fcc_folder', 'imap://$USER@mail.$DNSSUFFIX/Sent');
user_pref('mail.identity.id1.fcc_folder_picker_mode', '0');
user_pref('mail.identity.id1.stationery_folder', 'imap://$USER@mail.$DNSSUFFIX/Templates');
user_pref('mail.identity.id1.tmpl_folder_picker_mode', '0');
user_pref('mail.identity.id1.reply_on_top', 1);
user_pref('mail.identity.id1.sig_bottom', false);

user_pref('mail.server.server1.authMethod', 5);
user_pref('mail.server.server1.check_new_mail', true);
user_pref('mail.server.server1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.server.server1.login_at_startup', true);
user_pref('mail.server.server1.name', '$USER@$DNSSUFFIX');
user_pref('mail.server.server1.socketType', 2);
user_pref('mail.server.server1.storeContractID', '@mozilla.org/msgstore/berkeleystore;1');
user_pref('mail.server.server1.type', 'imap');
user_pref('mail.server.server1.userName', '$USER');
user_pref('mail.server.server1.using_subscription', false);
user_pref('mail.server.server1.offline_download', false);

user_pref('mail.smtpserver.smtp1.authMethod', 5);
user_pref('mail.smtpserver.smtp1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.smtpserver.smtp1.port', 25);
user_pref('mail.smtpserver.smtp1.try_ssl', 2);
user_pref('mail.smtpserver.smtp1.username', '$USER');
user_pref('mail.smtpservers', 'smtp1');" >> ~/.thunderbird/"$thunderbird_profile"/user.js

				cat > ~/.cache/sessions/xfce4-session-$HOSTNAME:0 << EOF
[Session: Default]
Client0_ClientId=226a61821-10f3-4419-9e7a-0249f50322e8
Client0_Hostname=local/$HOSTNAME
Client0_CloneCommand=Thunar
Client0_DiscardCommand=rm,-f,$HOME/.cache/sessions/Thunar-226a61821-10f3-4419-9e7a-0249f50322e8
Client0_RestartCommand=Thunar,--sm-client-id,226a61821-10f3-4419-9e7a-0249f50322e8,--daemon
Client0_Program=Thunar
Client0_UserId=$USER
Client0_Priority=24
Client1_ClientId=2e0608e27-afa3-4b87-943b-7a7bef018379
Client1_Hostname=local/$HOSTNAME
Client1_CloneCommand=xfsettingsd
Client1_RestartCommand=xfsettingsd,--display,:0.0,--sm-client-id,2e0608e27-afa3-4b87-943b-7a7bef018379
Client1_CurrentDirectory=$HOME
Client1_DesktopFile=/etc/xdg/autostart/xfsettingsd.desktop
Client1_Program=xfsettingsd
Client1_UserId=$USER
Client1_Priority=25
Client1_RestartStyleHint=2
Client2_ClientId=234147f9f-2bba-4250-8eb9-845b10e926d2
Client2_Hostname=local/$HOSTNAME
Client2_CloneCommand=xfce4-panel
Client2_RestartCommand=xfce4-panel,--display,:0.0,--sm-client-id,234147f9f-2bba-4250-8eb9-845b10e926d2
Client2_CurrentDirectory=$HOME
Client2_Program=xfce4-panel
Client2_UserId=$USER
Client2_Priority=25
Client2_RestartStyleHint=2
Client3_ClientId=2b5ddc17e-a05b-499c-96f3-943828ce775d
Client3_Hostname=local/$HOSTNAME
Client3_CloneCommand=xfdesktop
Client3_RestartCommand=xfdesktop,--display,:0.0,--sm-client-id,2b5ddc17e-a05b-499c-96f3-943828ce775d
Client3_CurrentDirectory=$HOME
Client3_Program=xfdesktop
Client3_UserId=$USER
Client3_Priority=35
Client3_RestartStyleHint=2
Client4_ClientId=239478cd6-b813-4b07-b95a-1ee567735dfa
Client4_Hostname=local/$HOSTNAME
Client4_CloneCommand=xfwm4
Client4_DiscardCommand=rm,-rf,$HOME/.cache/sessions/xfwm4-239478cd6-b813-4b07-b95a-1ee567735dfa.state
Client4_RestartCommand=xfwm4,--display,:0.0,--sm-client-id,239478cd6-b813-4b07-b95a-1ee567735dfa
Client4_CurrentDirectory=$HOME
Client4_Program=xfwm4
Client4_UserId=$USER
Client4_Priority=15
Client4_RestartStyleHint=2
Client5_ClientId=24b0bb6c1-ae0c-460f-8a32-085b2005d88c
Client5_Hostname=local/$HOSTNAME
Client5_CloneCommand=/usr/bin/thunderbird,--sm-config-prefix,/thunderbird-kKsbG2/
Client5_RestartCommand=/usr/bin/thunderbird,--sm-config-prefix,/thunderbird-kKsbG2/,--sm-client-id,24b0bb6c1-ae0c-460f-8a32-085b2005d88c,--screen,0
Client5_CurrentDirectory=$HOME
Client5_Program=thunderbird
Client5_UserId=$USER
Count=6
LegacyCount=0
Screen0_ActiveWorkspace=0
EOF
				cat > ~/.cache/sessions/xfwm4-239478cd6-b813-4b07-b95a-1ee567735dfa.state << EOF
[CLIENT] 0x2e0008e
  [CLIENT_ID] 24b0bb6c1-ae0c-460f-8a32-085b2005d88c
  [CLIENT_LEADER] 0x2e00001
  [WINDOW_ROLE] 3pane
  [RES_NAME] Mail
  [RES_CLASS] Thunderbird
  [WM_NAME] Inbox - Mozilla Thunderbird
  [WM_COMMAND] (1) "thunderbird"
  [GEOMETRY] (1,47,1024,1004)
  [GEOMETRY-MAXIMIZED] (1,47,1024,1004)
  [SCREEN] 0
  [DESK] 0
  [FLAGS] 0x80
EOF
			fi
		fi
	fi

	#Disable Firefox crash reporter
	export MOZ_CRASHREPORTER_DISABLE=1

	if karoshi-manage-flags get offline_mode >/dev/null; then
		if $offline_home_exists && [[ ! -e ~/.config/karoshi/offline-home-seen ]]; then
			if [[ -e /opt/karoshi/linuxclientsetup/config-files/offline-homes/new-offline-user.desktop ]]; then
				cp -f /opt/karoshi/linuxclientsetup/config-files/offline-homes/new-offline-user.desktop ~/.config/autostart/karoshi-new-offline-user.desktop
			fi
			touch ~/.config/karoshi/offline-home-seen
		fi
	else
		if $offline_home_exists; then
			if [[ -e /opt/karoshi/linuxclientsetup/config-files/offline-homes/online-merge.desktop ]]; then
				cp -f /opt/karoshi/linuxclientsetup/config-files/offline-homes/online-merge.desktop ~/.config/autostart/karoshi-online-merge.desktop
			fi
			[[ -e ~/.config/karoshi/offline-home-seen ]] && rm -f ~/.config/karoshi/offline-home-seen
		fi
	fi
else
	###############
	#Local user
	###############
	create_entries "Home" ~ folder-home

	#Add file manager entry to / if administrator
	if $is_admin; then
		sudo_open=true
		create_entries "File Manager" / folder-system
		unset sudo_open
	fi
fi

#Copy in admin-skel
if $is_admin && [[ -d /opt/karoshi/admin-skel ]]; then
	echo "Copying admin-skel into home area"
	find /opt/karoshi/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t ~
fi
if ! $is_admin && karoshi-manage-flags get offline_mode >/dev/null && $is_domain && [[ -e /opt/karoshi/admin-skel/.config ]] ; then
	echo "Copying admin-skel configuration into home area for offline mode"
	cp -rf /opt/karoshi/admin-skel/.config ~
fi

#Set permissions on icons
find ~/Desktop -name '*.desktop' -print0 | xargs -r0 chmod 0700
