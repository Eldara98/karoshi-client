#!/bin/bash

#Copyright (C) 2013 Robin McCorkell
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

#function create_entries
#	$1 is mount name
#	$2 is mount path
#	$3 is icon
function create_entries {
	filename=`tr '[:upper:] ' '[:lower:]-' <<< "$1"`
	#Desktop and Menu
	echo "[Desktop Entry]
Version=1.0
Type=Application
Terminal=false
Exec=exo-open --launch FileManager $2
Name=$1
Icon=$3
Categories=X-XFCE;X-Xfce-Toplevel;Karoshi;
OnlyShowIn=XFCE;" | tee ~/Desktop/karoshi-"$filename".desktop > ~/.local/share/applications/karoshi-"$filename".desktop
}

#####################
#All users
#####################

#Detect an administrator
is_admin=false
groups=( $(id -nG) )
for group in "${groups[@]}"; do
	if [[ $group == "admin" ]] || [[ $group == "sudo" ]] || [[ $group == "tech" ]]; then
		is_admin=true
		break
	fi
done
if [[ $(id -nu) == "root" ]]; then
	is_admin=true
fi

#Detect a domain user
is_domain=false
if [[ $(id -u) -ge 1000 ]] && [[ $(id -u) -ne 65534 ]]; then
	is_domain=true
fi

#Copy in admin-skel
if $is_admin && [[ -d /opt/karoshi/admin-skel ]]; then
	find /opt/karoshi/admin-skel -mindepth 1 -print0 | xargs -0 cp -rf -t ~
fi

#Create file manager entries
[[ ! -d ~/Desktop ]] && mkdir ~/Desktop
[[ ! -d ~/.local/share/applications ]] && mkdir -p ~/.local/share/applications

######################
#Domain/local users
######################

if $is_domain; then
	###############
	#Domain user
	###############

	#Create home icon first so that it appears first on the desktop
	if [[ $(mount | grep "^[^ ]* on $HOME/network/home type cifs") ]]; then
		create_entries "home" "$HOME/network/home" folder-home
	else
		create_entries "Home" ~ folder-home
	fi

	#Create icons to other mounted network shares
	for mountpath in `mount | grep "^[^ ]* on $HOME/network/[^ ]* type cifs" | cut -d' ' -f3 | sort`; do
		mountname=`basename $mountpath`
		if [[ $mountname != home ]]; then
			create_entries "$mountname" "$mountpath" folder-publicshare
		fi
	done
	
	#Copy in default icons
	[[ -d /opt/karoshi/desktop-icons/all ]] && find /opt/karoshi/desktop-icons/all -mindepth 1 -print0 | xargs -0 cp -rf -t ~/Desktop

	#Copy in extra icons for groups
	pri_group=`id -gn`
	[[ -d /opt/karoshi/desktop-icons/$pri_group ]] && find /opt/karoshi/desktop-icons/$pri_group -mindepth 1 -print0 | xargs -0 cp -rf -t ~/Desktop
	
	#Extract configuration
	[[ -f ~/network/home/.configuration.tar.gz ]] && tar -x -C ~ -f ~/network/home/.configuration.tar.gz
	[[ -f ~/network/home/.desktop-icons.tar.gz ]] && tar -x -C ~ -f ~/network/home/.desktop-icons.tar.gz
	
	#Set default directory for terminal emulator and file manager to network/home
	mkdir -p ~/.config/xfce4/xfconf/xfce-perchannel-xml
	cp -n /etc/xdg/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml ~/.config/xfce4/xfconf/xfce-perchannel-xml
	sed -i 's@"exo-open --launch \(TerminalEmulator\|FileManager\)"@"exo-open --launch \1 --working-directory network/home"@' ~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-keyboard-shortcuts.xml
	
	cp -n /usr/share/applications/exo-terminal-emulator.desktop ~/.local/share/applications
	sed -i 's@^Exec=exo-open --launch TerminalEmulator$@Exec=exo-open --launch TerminalEmulator --working-directory network/home@' ~/.local/share/applications/exo-terminal-emulator.desktop
	
	#create user.js for default Firefox settings
	if which firefox >/dev/null && [[ -d ~/.mozilla/firefox ]]; then
		firefox_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.mozilla/firefox/profiles.ini`
		if [[ $firefox_profile ]] && [[ -d ~/.mozilla/firefox/$firefox_profile ]]; then
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.mozilla/firefox/"$firefox_profile"
			fi
	
			#Default download directory
			echo "user_pref('browser.download.lastDir', '~/network/home/');" > ~/.mozilla/firefox/"$firefox_profile"/user.js
	
			#Give clipboard capability to Moodle and other sites
			if [[ -f /opt/karoshi/allow_clipboard_sites ]]; then
				echo "user_pref('capability.policy.allowclipboard.sites', '` < /opt/karoshi/allow_clipboard_sites`');
user_pref('capability.policy.allowclipboard.Clipboard.cutcopy', 'allAccess');
user_pref('capability.policy.allowclipboard.Clipboard.paste', 'allAccess');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi
	
			#Remove updated messages and extension checking
			firefox_version=`firefox --version | sed 's/^[^0-9]*//'`
			echo "user_pref('browser.startup.homepage_override.mstone', '$firefox_version');
user_pref('extensions.lastAppVersion', '$firefox_version');
user_pref('extensions.lastPlatformVersion', '$firefox_version');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js

			#Cache settings
			echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
	
			#Proxy server
			if [[ $PROXYSERVER ]]; then
				echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');
user_pref('browser.startup.homepage', '$PROXYSERVER.$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			else
				#For no proxy, we want the homepage to be about:home
				echo "user_pref('browser.startup.homepage', 'about:home');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi
	
			#Set up Kerberos
			if [[ $DOMAINTYPE == samba4 ]] || [[ $DOMAINTYPE == samba4_winbind ]]; then
				echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.mozilla/firefox/"$firefox_profile"/user.js
			fi
		fi
	fi

	#create user.js for default Thunderbird settings
	if which thunderbird >/dev/null && [[ -d ~/.thunderbird ]]; then
		thunderbird_profile=`sed -n '0,/^Path=/s/^Path=//p' ~/.thunderbird/profiles.ini`
		if [[ $thunderbird_profile ]] && [[ -d ~/.thunderbird/$thunderbird_profile ]]; then
			#Apply CA certificate
			if [[ -f /opt/karoshi/cacert.pem ]]; then
				certutil -A -n "Karoshi CA" -addstore root -t "CTu,CTu,CTu" -i /opt/karoshi/cacert.pem -d ~/.thunderbird/"$thunderbird_profile"
			fi
		
			#Remove updated messages and extension checking
			thunderbird_version=`thunderbird --version | sed 's/^[^0-9]*//'`
			echo "user_pref('extensions.lastAppVersion', '$thunderbird_version');
user_pref('extensions.lastPlatformVersion', '$thunderbird_version');
user_pref('mailnews.start_page_override.mstone', '$thunderbird_version');" >> ~/.thunderbird/"$thunderbird_profile"/user.js

			#Cache settings
			echo "user_pref('browser.cache.disk.capacity', 5120);" >> ~/.thunderbird/"$thunderbird_profile"/user.js
		
			#Proxy server
			if [[ $PROXYSERVER ]]; then
				echo "user_pref('network.proxy.http', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.http_port', 3128);
user_pref('network.proxy.ssl', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ssl_port', 3128);
user_pref('network.proxy.ftp', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.ftp_port', 3128);
user_pref('network.proxy.socks', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.socks_port', 3128);
user_pref('network.proxy.gopher', '$PROXYSERVER.$DNSSUFFIX');
user_pref('network.proxy.gopher_port', 3128);
user_pref('network.proxy.type', 1);
user_pref('network.proxy.no_proxies_on', 'localhost, 127.0.0.0/8, $DNSSUFFIX, $PDC');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
			fi
		
			#Set up Kerberos
			if [[ $DOMAINTYPE == samba4 ]] || [[ $DOMAINTYPE == samba4_winbind ]]; then
				echo "user_pref('network.negotiate-auth.trusted-uris', '$DNSSUFFIX');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
			fi
		
			if [[ $MAILSERVER ]]; then
				user_fullname=$(getent passwd $USER | cut -d: -f5 | cut -d, -f1)
		
				echo "user_pref('mail.identity.id1.useremail', '$USER@$DNSSUFFIX');
user_pref('mail.identity.id1.valid', true);
user_pref('mail.identity.id1.fullName', '$user_fullname');
user_pref('mail.identity.id1.smtpServer', 'smtp1');
user_pref('mail.identity.id1.archive_enabled', false);
user_pref('mail.identity.id1.draft_folder', 'imap://$USER@mail.$DNSSUFFIX/Drafts');
user_pref('mail.identity.id1.drafts_folder_picker_mode', '0');
user_pref('mail.identity.id1.fcc_folder', 'imap://$USER@mail.$DNSSUFFIX/Sent');
user_pref('mail.identity.id1.fcc_folder_picker_mode', '0');
user_pref('mail.identity.id1.stationery_folder', 'imap://$USER@mail.$DNSSUFFIX/Templates');
user_pref('mail.identity.id1.tmpl_folder_picker_mode', '0');

user_pref('mail.server.server1.authMethod', 5);
user_pref('mail.server.server1.check_new_mail', true);
user_pref('mail.server.server1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.server.server1.login_at_startup', true);
user_pref('mail.server.server1.name', '$USER@$DNSSUFFIX');
user_pref('mail.server.server1.socketType', 2);
user_pref('mail.server.server1.storeContractID', '@mozilla.org/msgstore/berkeleystore;1');
user_pref('mail.server.server1.type', 'imap');
user_pref('mail.server.server1.userName', '$USER');
user_pref('mail.server.server1.using_subscription', false);

user_pref('mail.smtpserver.smtp1.authMethod', 5);
user_pref('mail.smtpserver.smtp1.hostname', 'mail.$DNSSUFFIX');
user_pref('mail.smtpserver.smtp1.port', 25);
user_pref('mail.smtpserver.smtp1.try_ssl', 2);
user_pref('mail.smtpserver.smtp1.username', '$USER');
user_pref('mail.smtpservers', 'smtp1');" >> ~/.thunderbird/"$thunderbird_profile"/user.js
			fi
		fi
	fi
	
	#Create rednotebook link
	[[ ! -d ~/network/home/.rednotebook ]] && mkdir ~/network/home/.rednotebook
	[[ ! -d ~/.rednotebook ]] && ln -s network/home/.rednotebook ~/.rednotebook
	
	#Disable Firefox crash reporter
	export MOZ_CRASHREPORTER_DISABLE=1
else
	###############
	#Local user
	###############
	create_entries "Home" ~ folder-home
fi

#Add file manager entry to / if administrator
if $is_admin; then
	create_entries "File System" / folder-system
fi

#Set permissions on icons
find ~/Desktop -name '*.desktop' -print0 | xargs -0 chmod 0700
