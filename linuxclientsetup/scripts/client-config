#!/bin/bash

#Copyright (C) 2013 Robin McCorkell
#Original Copyright (C) 2006  Paul Sharrad

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

####################
#Refresh client information
####################
echo "Retrieving client information"
#unset LOCATION
unset PRINTSERVER
unset PROXYSERVER
unset CLIENTSHUTDOWNTIME
unset IDLESHUTDOWNTIME
unset MAILSERVER
IFS=$'\n'
[[ -f /tmp/netlogon/clients/$CLIENTMAC ]] && read -r -d $'\0' _ _ LOCATION _ < /tmp/netlogon/clients/$CLIENTMAC
[[ -f /tmp/netlogon/domain_information/print_server ]] && read -r -d $'\0' PRINTSERVER _ < /tmp/netlogon/domain_information/print_server
[[ -f /tmp/netlogon/domain_information/proxy_server ]] && read -r -d $'\0' PROXYSERVER _ < /tmp/netlogon/domain_information/proxy_server
[[ -f /tmp/netlogon/domain_information/clientshutdowntime ]] && read -r -d $'\0' CLIENTSHUTDOWNTIME _ < /tmp/netlogon/domain_information/clientshutdowntime
[[ -f /tmp/netlogon/domain_information/idletime ]] && read -r -d $'\0' IDLESHUTDOWNTIME _ < /tmp/netlogon/domain_information/idletime
[[ -f /tmp/netlogon/domain_information/mail_server ]] && MAILSERVER=true
unset IFS

####################
#Set apt settings through proxy
####################
if [[ $PROXYSERVER ]]; then
	echo "Configuring APT proxy"
	echo "Acquire::http::Proxy \"http://$PROXYSERVER.$DNSSUFFIX:3142/apt-cacher/\";" > /etc/apt/apt.conf.d/01proxy
fi

####################
#Domain specific stuff
####################
echo "Configuring pam_mount"
[[ -e /etc/security/pam_mount.conf.xml ]] && rm -f /etc/security/pam_mount.conf.xml
if ! karoshi-manage-flags get offline_mode >/dev/null; then
	case "$DOMAINTYPE" in
	samba4)
		[[ -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 ]] && cp -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 /etc/security/pam_mount.conf.xml
		;;
	samba4_winbind)
		[[ -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 ]] && cp -f /tmp/netlogon/linuxclient/pam_mount.conf.xml.krb5 /etc/security/pam_mount.conf.xml
		#Clear cache
		find /var/cache/samba -mindepth 1 -delete
		;;
	samba3)
		[[ -f /tmp/netlogon/linuxclient/pam_mount.conf.xml ]] && cp -f /tmp/netlogon/linuxclient/pam_mount.conf.xml /etc/security/pam_mount.conf.xml
		#Clear cache
		find /var/cache/samba -mindepth 1 -delete
		;;
	*)
		echo "WARNING: Unrecognized domain type $DOMAINTYPE"
		;;
	esac
fi
if [[ ! -f /etc/security/pam_mount.conf.xml ]]; then
	echo "WARNING: No pam_mount configuration file found"
	cat > /etc/security/pam_mount.conf.xml << EOF
<?xml version="1.0" encoding="UTF-8"?>
<pam_mount>

</pam_mount>
EOF
fi

#Add offline home entry
[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "\@</pam_mount>@ i\\
<volume uid='1000-100000' path='$KAROSHI_DATA/$KAROSHI_OFFLINE_HOMES/users/%(USER)' mountpoint='~/offline-home' options='bind' />" /etc/security/pam_mount.conf.xml

#Add VirtualBox entry
[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "\@</pam_mount>@ i\\
<volume uid='1000-100000' path='$KAROSHI_DATA/$KAROSHI_VIRTUALBOX/users/%(USER)' mountpoint='~/.VirtualBox' options='bind' />\\
<volume uid='1000-100000' path='$KAROSHI_DATA/$KAROSHI_VIRTUALBOX/users/%(USER)' mountpoint='~/VirtualBox VMs' options='bind' />" /etc/security/pam_mount.conf.xml

#################
#Home areas
#################
#tmpfs auto mount
#[[ -f /etc/security/pam_mount.conf.xml ]] && sed -i "0,/[[:blank:]]*<volume/s@@<volume options=\"size=100m,uid=%(USERUID),gid=%(USERGID),mode=0700\" mountpoint=\"~\" uid=\"1000-50000\" fstype=\"tmpfs\" />\n<volume@" /etc/security/pam_mount.conf.xml

#Clear home areas
echo "Clearing /home"
find /home -mindepth 1 -xdev -delete

####################
#Copy configuration
####################
echo "Copying configuration"
[[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/configuration/ ]] && find /tmp/netlogon/linuxclient/$LINUX_VERSION/configuration -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /

#Admin skel
echo "Copying admin skel"
[[ -e /opt/karoshi/admin-skel ]] && rm -rf /opt/karoshi/admin-skel
mkdir /opt/karoshi/admin-skel
if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/admin-skel/ ]]; then
	find /tmp/netlogon/linuxclient/$LINUX_VERSION/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
elif [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/admin_skel/ ]]; then
	find /tmp/netlogon/linuxclient/$LINUX_VERSION/admin_skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
else
	karoshi-manage-flags get offline_mode >/dev/null || echo "WARNING: No admin skel found on server - using default one"
	find /opt/karoshi/linuxclientsetup/admin-skel -mindepth 1 -maxdepth 1 -print0 | xargs -r0 cp -rf -t /opt/karoshi/admin-skel
fi

#Do skel (properly)
if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/skel.tar.gz ]]; then
	echo "Found new skel - replacing existing one"
	[[ -e /etc/skel ]] && rm -rf /etc/skel
	tar -x -C /etc -f /tmp/netlogon/linuxclient/$LINUX_VERSION/skel.tar.gz
fi
#/etc/skel should be readable by all, and directories should be 755
chown -R root:root /etc/skel
chmod -R +r /etc/skel
find /etc/skel -type d -print0 | xargs -r0 chmod 755

#Version agnostic configuration
echo "Copying other files"
#Background images
[[ -d $KAROSHI_DATA/images ]] || mkdir -p "$KAROSHI_DATA"/images
if [[ -f /tmp/netlogon/linuxclient/background.png ]]; then
	cp -f /tmp/netlogon/linuxclient/background.png "$KAROSHI_DATA"/images
	update-alternatives --install /usr/share/backgrounds/karoshi.png karoshi-background "$KAROSHI_DATA"/images/background.png 50
fi
if [[ -f /tmp/netlogon/linuxclient/login-background.png ]]; then
	cp -f /tmp/netlogon/linuxclient/login-background.png "$KAROSHI_DATA"/images
	update-alternatives --install /usr/share/backgrounds/karoshi-login.png karoshi-login-background "$KAROSHI_DATA"/images/login-background.png 50
fi

#Clipboard sites for later on
[[ -f /opt/karoshi/allow_clipboard_sites ]] && rm -f /opt/karoshi/allow_clipboard_sites
[[ -f /tmp/netlogon/domain_information/allow_clipboard_sites ]] && cp /tmp/netlogon/domain_information/allow_clipboard_sites /opt/karoshi

#Copy domain CA certificate
[[ -f /opt/karoshi/cacert.pem ]] && rm -f /opt/karoshi/cacert.pem
[[ -f /tmp/netlogon/domain_information/cacert.pem ]] && cp /tmp/netlogon/domain_information/cacert.pem /opt/karoshi

#Static ARPs
[[ -f /tmp/netlogon/domain_information/static_arps ]] && arp -f /tmp/netlogon/domain_information/static_arps

#Create GPG keyring for verifying server messages
[[ -e /opt/karoshi/keyring.gpg ]] && rm -f /opt/karoshi/keyring.gpg
if [[ -f /tmp/netlogon/linuxclient/server-verify.key ]]; then
	gpg --batch --no-default-keyring --keyring /opt/karoshi/keyring.gpg --import /tmp/netlogon/linuxclient/server-verify.key
fi

#######################
#Thunderbird extensions
#######################

function do_xpi {
	xpi_name=$(basename "$1")
	xpi_name=${xpi_name%.xpi}
	
	if [[ -z $xpi_name ]]; then
		echo "Warning: Something bad happened" >&2
		return
	fi
	
	mkdir /opt/karoshi/thunderbird/extensions/"$xpi_name"
	unzip -q "$1" -d /opt/karoshi/thunderbird/extensions/"$xpi_name"
	
	xpi_id=$(xmlstarlet sel -N rdf=http://www.w3.org/1999/02/22-rdf-syntax-ns# -N em=http://www.mozilla.org/2004/em-rdf# \
				-t -m "//rdf:Description[@about='urn:mozilla:install-manifest']" -i "em:id" -v "em:id" --else -v "@em:id" \
				/opt/karoshi/thunderbird/extensions/"$xpi_name"/install.rdf)
	#Check if we actually have a valid extension id
	if [[ -z $xpi_id ]]; then
		echo "Warning: Thunderbird extension $xpi_name is invalid" >&2
		return
	fi
	
	#Install extension
	ln -Ts /opt/karoshi/thunderbird/extensions/"$xpi_name" /usr/lib/mozilla/extensions/{3550f703-e582-4d05-9a08-453d09bdfdc6}/"$xpi_id"
}

#{3550f703-e582-4d05-9a08-453d09bdfdc6} is the app-id for Thunderbird
[[ -d /usr/lib/mozilla/extensions/{3550f703-e582-4d05-9a08-453d09bdfdc6} ]] || mkdir -p /usr/lib/mozilla/extensions/{3550f703-e582-4d05-9a08-453d09bdfdc6}
[[ -d /opt/karoshi/thunderbird/extensions ]] || mkdir -p /opt/karoshi/thunderbird/extensions

echo "Clearing current Thunderbird extensions"
#Clear all extensions
find /opt/karoshi/thunderbird/extensions -mindepth 1 -delete
find /usr/lib/mozilla/extensions/{3550f703-e582-4d05-9a08-453d09bdfdc6} -maxdepth 1 -lname '/opt/karoshi/thunderbird/extensions/*' -delete

if [[ -d /tmp/netlogon/client_settings/thunderbird/extensions ]]; then
	#Global extensions
	while read -r -d $'\0' xpi; do
		echo "Found new global extension: $xpi"
		do_xpi "$xpi"
	done < <(find /tmp/netlogon/client_settings/thunderbird/extensions -maxdepth 1 -mindepth 1 -name '*.xpi' -print0)
	#Linux-specific extensions
	if [ -d /tmp/netlogon/client_settings/thunderbird/extensions/linux-$(uname -i) ]; then
		while read -r -d $'\0' xpi; do
			echo "Found new architecture extension: $xpi"
			do_xpi "$xpi"
		done < <(find /tmp/netlogon/client_settings/thunderbird/extensions/linux-$(uname -i) -maxdepth 1 -mindepth 1 -name '*.xpi' -print0)
	fi
fi

##########################
#Update the upstart scripts
##########################
echo "Updating Upstart scripts"
[[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/utilities/karoshi-update.conf ]] && cp -f /tmp/netlogon/linuxclient/$LINUX_VERSION/utilities/karoshi-update.conf /etc/init
[[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/utilities/karoshi-idle-shutdown.conf ]] && cp -f /tmp/netlogon/linuxclient/$LINUX_VERSION/utilities/karoshi-idle-shutdown.conf /etc/init

###########################
#Create cronjob to shut computer down
###########################
if [[ $CLIENTSHUTDOWNTIME ]]; then
	echo "Setting auto shutdown time to $CLIENTSHUTDOWNTIME"
	hours=`cut -d: -f1 <<< "$CLIENTSHUTDOWNTIME"`
	minutes=`cut -d: -f2 <<< "$CLIENTSHUTDOWNTIME"`

	if [[ $hours ]] && [[ $minutes ]]
	then
		echo "SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=\"\"
HOME=/

$minutes $hours * * * /opt/karoshi/scripts/client-shutdown" | crontab -
	fi
fi

###########################
#Configure firewall
###########################
echo "Configuring firewall"
#Reset firewall to defaults
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -F
iptables -X

#Create and configure log deny chains
iptables -N LOGDROP
iptables -N LOGREJECT

iptables -A LOGDROP -j LOG
iptables -A LOGREJECT -j LOG

iptables -A LOGDROP -j DROP
iptables -A LOGREJECT -j REJECT

#Create Karoshi chains
iptables -N karoshi-local #Local rules
iptables -N karoshi-domain #Domain rules
iptables -N karoshi-auto #Auto-generated rules

#Add rules to INPUT chain
iptables -A INPUT -i lo -j ACCEPT #Allow all traffic on lo
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT #Allow established connections
[[ -e /tmp/netlogon/client_settings/firewall/no_ping ]] || iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT #Permit pings
iptables -A INPUT -j karoshi-local
iptables -A INPUT -j karoshi-domain
iptables -A INPUT -j karoshi-auto
[[ -e /tmp/netlogon/client_settings/firewall/drop_deny ]] || iptables -A INPUT -j REJECT #Reject all other packets

#Firewall rule processing
deny_target="LOGREJECT"
[[ -e /tmp/netlogon/client_settings/firewall/drop_deny ]] && deny_target="LOGDROP"
function process_rules {
	# $1 = file to process
	# $2 = iptables chain
	[[ $1 ]] || return
	if ! [[ -f $1 ]]; then
		echo "ERROR: Firewall rule processing: rule file $1 does not exist" >&2
		return
	fi
	[[ $2 ]] || return
	if ! iptables -n --list "$2" >/dev/null; then
		echo "ERROR: Firewall rule processing: chain $2 does not exist" >&2
		return
	fi
	
	(( line_no = 0 ))
	while read -r action protocol port source; do
		(( ++line_no ))
		if [[ $action ]] && [[ $action != \#* ]]; then
			rule=( )
			
			#Protocol
			case "$protocol" in
			all|any)
				;;
			*)
				if getent protocols "$protocol" >/dev/null; then
					rule+=( -p "$protocol" )
				else
					echo "$1:$line_no: Invalid protocol - $protocol" >&2
					continue
				fi
				;;
			esac
			
			#Port
			case "$port" in
			all|any)
				;;
			*)
				if getent services "$port" >/dev/null || ( [[ $port -gt 0 ]] && [[ $port -lt 65535 ]] ); then
					if ! ( [[ $protocol == "tcp" ]] || [[ $protocol == "udp" ]] ); then
						echo "$1:$line_no: Port option requires TCP or UDP protocol" >&2
						continue
					fi
					rule+=( --dport $port )
				else
					echo "$1:$line_no: Invalid port - $port" >&2
					continue
				fi
				;;
			esac
			
			#Source
			case "$source" in
			any|all|"")
				;;
			*)
				rule+=( --source "$source" )
				;;
			esac
			
			#Action
			case "$action" in
			allow)
				rule+=( -j ACCEPT )
				;;
			deny)
				rule+=( -j "$deny_target" )
				;;
			*)
				echo "$1:$line_no: Invalid action - $action" >&2
				continue
				;;
			esac
			
			#Commit rule
			iptables -A "$2" "${rule[@]}"
		fi
	done < "$1"
}

[[ -f /tmp/netlogon/client_settings/firewall/rules ]] && process_rules /tmp/netlogon/client_settings/firewall/rules karoshi-domain
[[ -f /opt/karoshi/firewall_rules ]] && process_rules /opt/karoshi/firewall_rules karoshi-local

#Generate auto rules
echo "Performing auto-generation of firewall rules"
karoshi-generate-firewall-rules

#Set default policies - done last to prevent connection dropouts
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT

###########################
#Update acceptable_use
###########################
[[ -f /tmp/netlogon/linuxclient/acceptable_use.txt ]] && cp -f /tmp/netlogon/linuxclient/acceptable_use.txt /opt/karoshi/
[[ -f /opt/karoshi/acceptable_use.txt ]] && chmod 0644 /opt/karoshi/acceptable_use.txt

###########################
#Update desktop icons for groups
###########################
echo "Updating desktop icons"
if [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop-icons ]]; then
	[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
	cp -rfT /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop-icons /opt/karoshi/desktop-icons
elif [[ -d /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop_icons ]]; then
	[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
	cp -rfT /tmp/netlogon/linuxclient/$LINUX_VERSION/desktop_icons /opt/karoshi/desktop-icons
else
	if ! karoshi-manage-flags get offline_mode >/dev/null; then
		[[ -e /opt/karoshi/desktop-icons ]] && rm -rf /opt/karoshi/desktop-icons
		echo "WARNING: Could not find any desktop icons on server"
	fi
fi

if [[ -d /opt/karoshi/desktop-icons ]]; then
	chmod -R 0644 /opt/karoshi/desktop-icons
	chmod -R u+X,g+X,o+X /opt/karoshi/desktop-icons
	while read file; do
		filename="$(tr '[:upper:] ' '[:lower:]-' <<< "$(basename "$file")")"
		mv "$file" "`dirname "$file"`/karoshi-$filename"
	done < <(find /opt/karoshi/desktop-icons/ -name "*.desktop" -and -not -name "karoshi-*.desktop")
fi

############################
#Printers
############################
echo "Configuring printers"
#Turn off cups browsing
if [[ `grep -c "Browsing Off" /etc/cups/cupsd.conf` -eq 0 ]]
then
	echo "Browsing Off
BrowseInterval 0" >> /etc/cups/cupsd.conf
fi

#Assign printers depending on the location
if [[ $LOCATION ]] && ! karoshi-manage-flags get offline_mode >/dev/null; then
	#Remove all printers
	while read -r printer _; do
		if [[ `lpstat -v $printer | grep 'smb:\|ipp:'` ]]; then
			echo "Removing $printer"
			lpadmin -x $printer
		fi
	done < <(lpstat -a)
	
	#Add printers
	if [[ $PRINTSERVER ]] && [[ -f /tmp/netlogon/printers.txt ]]; then
		all_printers=`grep $LOCATION /tmp/netlogon/printers.txt`
		if [[ $all_printers ]]; then
			printer_count=`cut -d, -f2 <<< "$all_printers"`
			default_printer=`cut -d, -f$(( printer_count + 3 )) <<< "$all_printers"`
			for (( i = 3; i < printer_count + 3; ++i )); do
				printer=`cut -d, -f$i <<< "$all_printers"`
				echo "Adding printer $printer"
				if [[ $DOMAINTYPE == samba3 ]]; then
					lpadmin -p $printer -v smb://$PRINTSERVER.$DNSSUFFIX/$printer -L "$LOCATION" -D "$printer" -E
				else
					lpadmin -p $printer -v ksmb://$PRINTSERVER.$DNSSUFFIX/$printer -L "$LOCATION" -D "$printer" -E
				fi
				#Copy PPD
				[[ -f /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd ]] && lpadmin -p $printer -P /tmp/netlogon/linuxclient/printer_drivers/$printer.ppd
			done
			lpadmin -d $default_printer
		fi
	fi
fi

#Permit administrative access to CUPS if offline
if karoshi-manage-flags get offline_mode >/dev/null; then
	echo "Unlocking CUPS for offline mode"
	[[ -f /etc/cups/cupsd.conf ]] && sed -i 's/^DefaultPolicy .*/DefaultPolicy offline/' /etc/cups/cupsd.conf
else
	[[ -f /etc/cups/cupsd.conf ]] && sed -i 's/^DefaultPolicy .*/DefaultPolicy default/' /etc/cups/cupsd.conf
fi

############################
#Update client
############################
#Use update var so that apt-get only updates once
apt_updated=false
#Only run if flag file is present
if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/enable_updates ]]
then
	echo "Updating Software"
	apt-get update
	apt_updated=true
	apt-get -y upgrade
fi

############################
#Install and remove software
############################
#Only run if flag file is present
if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/enable_software_install ]]
then
	#Install software
	if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/install_list ]]
	then
		#Only run apt-get update if it has not already run
		! $apt_updated && apt-get update
		install_list=`sed 's/ //g' /tmp/netlogon/linuxclient/$LINUX_VERSION/install_list`
		if [[ $install_list ]]; then
			apt-get -y install --no-upgrade $install_list
		fi
	fi
	
	#Remove software
	if [[ -f /tmp/netlogon/linuxclient/$LINUX_VERSION/remove_list ]]
	then
		remove_list=`sed 's/ //g' /tmp/netlogon/linuxclient/$LINUX_VERSION/remove_list`
		if [[ $remove_list ]]; then
			echo "Removing Software"
			apt-get -y remove $remove_list
		fi
	fi
fi

##########################
#Configure virtualbox drive
##########################

function configureVboxPartition {
	#Copy data if required
	if ! [[ $(find "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -maxdepth 0 -type d -empty 2>/dev/null) ]]; then
		mkdir -p /tmp/karoshi-virtualbox
		mount "$1" /tmp/karoshi-virtualbox
		find "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -mindepth 1 -maxdepth 1 -print0 | xargs -r0 mv -t /tmp/karoshi-virtualbox
		umount /tmp/karoshi-virtualbox
		rmdir /tmp/karoshi-virtualbox
	fi

	#Write to /etc/fstab
	uuid=$(lsblk -no UUID "$1")
	echo "# karoshi: $KAROSHI_DATA/$KAROSHI_VIRTUALBOX" >> /etc/fstab
	echo "UUID=$uuid	`sed 's/ /\\040/g' <<< "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX"`	ext4	defaults	0	2" >> /etc/fstab

	mount "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX"
}

[[ -d $KAROSHI_DATA/$KAROSHI_VIRTUALBOX ]] || mkdir "$KAROSHI_DATA"/"$KAROSHI_VIRTUALBOX" -m 0755
if ! grep -Eq "^[^[:space:]]+[[:space:]]+$KAROSHI_DATA/$KAROSHI_VIRTUALBOX[[:space:]]" /etc/fstab; then
	vbox_set=false
	#Detect any ext4 partition with a label of KAROSHI-VBOX
	while read -r partition; do
		if [[ $(e2label "$partition") == "KAROSHI-VBOX" ]]; then
			echo "Found existing VirtualBox partition for $KAROSHI_DATA/$KAROSHI_VIRTUALBOX: $partition"
			configureVboxPartition "$partition"
			vbox_set=true
			break
		fi
	done < <(find /dev -maxdepth 1 -name sd??)
	
	if ! $vbox_set; then
		#Detect any SATA or SCSI drives with no valid partition table
		drive=$(parted -lms 2>/dev/null | sed -n 's@Error: \(/dev/sd.\): unrecognised disk label@\1@p')
		#Detect any SATA or SCSI drives with no partitions
		if ! [[ $drive ]]; then
			drive=$(parted -lms 2>/dev/null | sed -n '/BYT;$/ { n; /^\/dev\/sd./ { h; n; /^$/ { g; s/\([^:]*\):.*/\1/p; q; } } }')
		fi
	
		if [[ $drive ]]; then
			echo "Detected candidate drive for $KAROSHI_DATA/$KAROSHI_VIRTUALBOX: $drive"
			#Make GPT partition table and single logical partition
			parted -s "$drive" -- mktable gpt
			parted -s -a optimal "$drive" -- mkpart logical 0% 100%
			mkfs.ext4 -L "KAROSHI-VBOX" "$drive"1
		
			configureVboxPartition "$drive"1
		fi
	fi
fi

##########################
#Miscellaneous things
##########################

#Restrict cron and at to root
echo root > /etc/cron.allow
echo root > /etc/at.allow

#Enable trim support in fstab
for device in /dev/sd*; do
	device_uuid=`blkid $device | sed 's@.*UUID="\([^"]*\)".*@\1@'`
	if [[ $device_uuid ]] && [[ `hdparm -I $device | grep TRIM` ]]; then
		sed -i "/swap\|discard,noatime/!s@\(UUID=$device_uuid[[:blank:]]\+[^[:blank:]]\+[[:blank:]]\+[^[:blank:]]\+[[:blank:]]\+[^[:blank:]]\+\)@\1,discard,noatime@" /etc/fstab
	fi
done

#Configure pam_group.so for offline users
if karoshi-manage-flags get offline_mode >/dev/null; then
	sed -i 's/^### Karoshi Hook ###$/### * Karoshi Hook * ###\
*;*;*;Al0000-2400;lpadmin,netdev/' /etc/security/group.conf
else
	sed -i '/^### \* Karoshi Hook \* ###$/ { N; c\
### Karoshi Hook ###
}' /etc/security/group.conf
fi

#Write new variables to file
updateVariables
