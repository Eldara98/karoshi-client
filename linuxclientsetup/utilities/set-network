#!/bin/bash

#Copyright (C) 2012 Robin McCorkell
#Original Copyright (C) 2010 Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

source /opt/karoshi/linuxclientsetup/utilities/common

function isWireless {
	[[ $1 =~ ^(wlan|wifi|ath)[[:digit:]]+ ]]
	return $?
}

function isWired {
	[[ $1 =~ ^(eth|lan)[[:digit:]]+ ]]
	return $?
}

function getClientSettings {
	echo \#Asking for network settings >&11
	while ! $client_settings; do
		#Create network_int_list for use in combo box in yad
		network_int_list=$NETWORKINT
		for i in "${network_ints[@]}"; do
			[[ $i == $NETWORKINT ]] && continue
			network_int_list="$network_int_list!$i"
		done
		#Get and set temporary network settings
		understandableYad "--form --title 'Network Settings' --text 'IP Address, Netmask and Gateway are not required if DHCP is selected' --wrap \
							--field='Client Name' --field='Network Interface':CB --field='IP Address' --field='Netmask' --field='Gateway' --field='DHCP':CHK \
							--button='gtk-cancel:1' --button='gtk-ok:0' \
							'$CLIENT_NAME' '$network_int_list' '$IPADDR' '$NETMASK' '$GATEWAY' '$dhcp'"
		CLIENT_NAME=`cut -d"|" -f1 <<< "$DATA" | sed 's/ //g'`
		NETWORKINT=`cut -d"|" -f2 <<< "$DATA" | sed 's/ //g'`
		IPADDR=`cut -d"|" -f3 <<< "$DATA"`
		NETMASK=`cut -d"|" -f4 <<< "$DATA"`
		GATEWAY=`cut -d"|" -f5 <<< "$DATA"`
		dhcp=`cut -d"|" -f6 <<< "$DATA" | tr '[:upper:]' '[:lower:]'`
		if [[ -z $CLIENT_NAME ]] || [[ -z $NETWORKINT ]]; then
			info_alert "Error" "You must enter a client name and network interface"
			continue
		fi
		if ! ( $dhcp || ( [[ $IPADDR =~ $IPREGEX ]] && [[ $NETMASK =~ $IPREGEX ]] && [[ $GATEWAY =~ $IPREGEX ]] ) ); then
			info_alert "Error" "You must enter a valid IP address, netmask and gateway, or choose DHCP"
			continue
		fi

		if isWireless $NETWORKINT; then
			understandableYad "--form --title 'Wireless Network Settings' --text 'Wireless interface detected' --wrap \
								--field='SSID' --field='WPA2-PSK Key' \
								--button='gtk-go-back:2' --button='gtk-cancel:1' --button='gtk-ok:0'
								'$wifi_ssid' '$wifi_key'"
			if [[ $? -ne 0 ]]; then
				continue
			fi
			wifi_ssid=`cut -d"|" -f1 <<< "$DATA"`
			wifi_key=`cut -d"|" -f2 <<< "$DATA"`
			if [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]]; then
				info_alert "Error" "You must enter an SSID and key"
				continue
			fi
		fi

		client_settings=true
	done
}

function writeNetworkSettings {
	if $dhcp; then ip_type=dhcp; else ip_type=static; fi
	echo "auto lo
iface lo inet loopback
auto $NETWORKINT
iface $NETWORKINT inet $ip_type" > /etc/network/interfaces

	#If static
	if ! $dhcp; then
		echo "	address $IPADDR
	netmask $NETMASK
	gateway $GATEWAY" >> /etc/network/interfaces
	fi
	
	#If wireless
	if isWireless $NETWORKINT; then
		echo "	wpa-ssid $wifi_ssid
	wpa-psk $wifi_key" >> /etc/network/interfaces
	fi
}

function updateHostname {
	[[ -z $CLIENT_NAME ]] && return
	echo "$CLIENT_NAME" > /etc/hostname
	hostname "$CLIENT_NAME"
	
	if $dhcp; then
		sed -i "/##STATIC##/{ N; d; }" /etc/hosts
		if grep "^127\.0\.1\.1" /etc/hosts; then
			sed -i "s/^127\.0\.1\.1.*/127.0.1.1	$CLIENT_NAME.$DNSSUFFIX $CLIENT_NAME/" /etc/hosts
		else
			echo "127.0.1.1	$CLIENT_NAME.$DNSSUFFIX $CLIENT_NAME" >> /etc/hosts
		fi
	else
		sed -i "/^127\.0\.1\.1/d" /etc/hosts
		sed -i "/##STATIC##/{ N; d; }" /etc/hosts
		echo "##STATIC##" >> /etc/hosts
		echo "$IPADDR	$CLIENT_NAME.$DNSSUFFIX $CLIENT_NAME" >> /etc/hosts
	fi
}

####################
#Detect network interface(s)
####################
network_ints=(`ifconfig -a | sed -n '/^[^[:blank:]]/s/^\(\w*\).*/\1/p' | grep -v ^lo\$`)

for NETWORKINT in "${network_ints[@]}"; do
	isWired $NETWORKINT && break
done
if laptop-detect; then
	for wifi_network_int in "${network_ints[@]}"; do
		isWireless $wifi_network_int && break
	done
fi

####################
#Get network settings
####################
pdc_set=false
client_settings=false
dhcp=false
[[ ! -d /tmp/netlogon ]] && mkdir -p /tmp/netlogon

#Attempt to guess SERVERIP by DHCP
echo "auto lo
iface lo inet loopback
auto $NETWORKINT
iface $NETWORKINT inet dhcp" > /etc/network/interfaces
exec 11> >(progress_info "Karoshi Setup" "Karoshi Client Setup: Network Configuration")
echo 5 >&11
echo \#Bringing down network interface >&11
ifdown --force $NETWORKINT
#Clear leases to only get one lease in file
> /var/lib/dhcp/dhclient.$NETWORKINT.leases
echo \#Bringing up network interface >&11
ifup $NETWORKINT
echo 10 >&11
# flag forcesetpdc can be used to prevent automatic pdc guessing for testing purposes
if [[ -s /var/lib/dhcp/dhclient.$NETWORKINT.leases ]] && ! karoshi-manage-flags get forcesetpdc; then dhcp=true; fi

#Try until we have a PDC
while ! $pdc_set; do
	karoshi-manage-flags unset networkset
	SERVERIP=
	#We define exitfunc further down, so this just resets it
	function exitfunc {
		info_alert "Configuration" "Configuration cancelled"
		exit $1
	}
	if $dhcp && [[ -s /var/lib/dhcp/dhclient.$NETWORKINT.leases ]]; then
	#If we have a DHCP lease
		SERVERIP=`sed -n 's/.*option domain-name-servers *\([0-9.]*\).*/\1/p' /var/lib/dhcp/dhclient.$NETWORKINT.leases`
		NETMASK=`sed -n 's/.*option subnet-mask *\([0-9.]*\).*/\1/p' /var/lib/dhcp/dhclient.$NETWORKINT.leases`
		GATEWAY=`sed -n 's/.*option routers *\([0-9.]*\).*/\1/p' /var/lib/dhcp/dhclient.$NETWORKINT.leases`
	elif $dhcp; then
	#If we wanted a DHCP lease
		info_alert "Error" "Did not get dhcp lease"
		dhcp=false
		continue
	else
	#If we didn't get a DHCP lease
		client_settings=false
		echo 5 >&11
		echo \#Bringing down network interface >&11
		ifdown $NETWORKINT
		#Clear leases to only get one lease in file
		> /var/lib/dhcp/dhclient.$NETWORKINT.leases
		getClientSettings
		writeNetworkSettings
		echo \#Bringing up network interface >&11
		ifup $NETWORKINT
		echo 5 >&11
		if $dhcp; then
			#Continue to hit DHCP logic again
			continue
		fi
		if ! arping -f -c 2 $GATEWAY; then
			info_alert "Error" "Cannot arping gateway $GATEWAY"
			continue
		fi
	fi
	
	#Update hostname and /etc/hosts
	updateHostname
	
	#At this point a network has been configured, so the flag is set
	karoshi-manage-flags set networkset

	#exitfunc if the user cancelled selecting a PDC
	function exitfunc {
		info_alert "Network Settings" "Not configuring for Karoshi Server"
		karoshi-manage-flags set nokaroshi
		exit $1
	}
	if [[ $SERVERIP ]]; then
	#SERVERIP was set, so attempt to mount netlogon
		if mount.cifs //$SERVERIP/netlogon /tmp/netlogon -o guest,nounix; then
			pdc_set=true
		else
			pdc_set=false
		fi
	fi
	if ! $pdc_set; then
	#We still haven't connected to the PDC
		understandableYad "--form --title 'Network Settings' \
							--field='PDC IP Address' \
							--button='Skip:1' --button='gtk-ok:0' \
							'$SERVERIP'"
		SERVERIP=`cut -d"|" -f1 <<< "$DATA" | sed 's/ //g'`
		echo \#Attempting to mount netlogon >&11
		if mount.cifs //$SERVERIP/netlogon /tmp/netlogon -o guest,nounix; then
			pdc_set=true
		else
			info_alert "Error" "Invalid PDC"
			pdc_set=false
			dhcp=false
		fi
	fi
	#If we got to this point still having not connected to a PDC,
	# send us back to the top to get network settings again.
done

echo 20 >&11
echo \#Setting network configuration >&11

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#At this point it is assumed that a PDC can be contacted
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

karoshi-manage-flags unset nokaroshi

#exitfunc to unmount the share, and exit
function exitfunc {
	info_alert "Error" "Configuration cancelled"
	umount /tmp/netlogon
	exit $1
}

echo $SERVERIP > /opt/karoshi/serverip

####################
#Pull down server information
####################
function getMac {
	ifconfig $1 | sed -n 's/.*HWaddr \(..\):\(..\):\(..\):\(..\):\(..\):\(..\).*/\U\1\2\3\4\5\6/p'
}
#Try the WiFi interface first, since we may be a laptop
temp_network_int=$NETWORKINT
if [[ $wifi_network_int ]]; then
	NETWORKINT=$wifi_network_int
fi
#Get mac address for the iface
CLIENTMAC=`getMac $NETWORKINT`

function pullClientInformation {
	IFS=$'\n'
	read -r -d $'\0' CLIENT_NAME IPADDR LOCATION _ < /tmp/netlogon/clients/$CLIENTMAC
	unset IFS

	client_settings=true
	dhcp=false
}

if [[ -f /tmp/netlogon/clients/$CLIENTMAC ]]; then
	pullClientInformation
else
#We may be here because the WiFi interface did not have a CLIENTMAC entry,
# so go back to the first interface and try again
	NETWORKINT=$temp_network_int
	CLIENTMAC=`getMac $NETWORKINT`
	[[ -f /tmp/netlogon/clients/$CLIENTMAC ]] && pullClientInformation
fi

echo 25 >&11

####################
#Final settings for network
####################
function exitfunc {
	info_alert "Error" "Fatal Error:\n Cannot find domain information on server"
	umount /tmp/netlogon
	exit $1
}
if [[ -f /tmp/netlogon/domain_information/netmask ]]; then NETMASK=` < /tmp/netlogon/domain_information/netmask`; fi
if [[ -f /tmp/netlogon/domain_information/gateway ]]; then GATEWAY=` < /tmp/netlogon/domain_information/gateway`; fi
if [[ -f /tmp/netlogon/domain_information/main_server ]]; then PDC=` < /tmp/netlogon/domain_information/main_server`; fi
! ( [[ $PDC ]] && [[ $NETMASK =~ $IPREGEX ]] && [[ $GATEWAY =~ $IPREGEX ]] ) && exitfunc 1

function exitfunc {
	info_alert "Error" "Configuration cancelled"
	umount /tmp/netlogon
	exit $1
}
#If NETWORKINT is a wireless interface, and don't already have wireless information,
# get wireless information from server
if isWireless $NETWORKINT && ( [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]] ); then
	echo \#Checking wireless network settings >&11
	wifi_ssid=` < /tmp/netlogon/domain_information/wifi_ssid`
	wifi_key=` < /tmp/netlogon/domain_information/wifi_key`
	if [[ -z $wifi_ssid ]] || [[ -z $wifi_key ]]; then
	#Couldn't find wireless information on server, but that's OK
	# because we can just prompt the user for it
		understandableYad "--form --title 'Wireless Network Settings' \
							--field='SSID' --field='WPA2-PSK Key' \
							--button='gtk-cancel:1' --button='gtk-ok:0'\
							'$wifi_ssid' '$wifi_key'"
	fi
	echo \#Setting network configuration >&11
fi

echo 30 >&11

#Get network settings from user if not set
getClientSettings

echo 35 >&11
echo \#Setting network configuration >&11

#Automation steps
if [[ -f /tmp/netlogon/domain_information/lockadministrator ]]; then
	karoshi-manage-flags set passwordset
	passwd -l administrator
	passwd -l root
fi

echo \#Finalising network configuration >&11

#Do network configuration and remount netlogon
umount /tmp/netlogon
ifdown $NETWORKINT
echo 40 >&11
writeNetworkSettings
updateHostname
ifup $NETWORKINT
echo 45 >&11
mount.cifs //$SERVERIP/netlogon /tmp/netlogon -o guest,nounix
echo 50 >&11

echo "nameserver $SERVERIP" > /etc/resolv.conf

karoshi-manage-flags set networkset

#############
#Domain setup
#############
DNSSUFFIX="internal"
#Get nsswitch functions
source /opt/karoshi/linuxclientsetup/utilities/nsswitch-funcs

function exitfunc {
	info_alert "Error" "Fatal Error:\n Cannot find domain information on server"
	umount /tmp/netlogon
	exit $1
}

echo \#Performing domain setup >&11

if [[ -f /tmp/netlogon/domain_information/samba4 ]]; then
	#Using a Samba4 domain
	DNSSUFFIX=` < /tmp/netlogon/domain_information/dns_domain`
	[[ -z $DNSSUFFIX ]] && exitfunc 1
	#Copy files and change variables
	dns_domain_caps=`tr '[[:lower:]]' '[[:upper:]]' <<< "$DNSSUFFIX"`
	DOMAIN=`sed "s/^\([^.]*\).*/\1/" <<< "$dns_domain_caps"`
	echo 55 >&11
	echo \#Copying files >&11
	cp -rf /opt/karoshi/linuxclientsetup/config-files/common/* /
	cp -rf /opt/karoshi/linuxclientsetup/config-files/samba4/* /
	sed -i "s/CHANGETHISREALM/$dns_domain_caps/g" /etc/krb5.conf
	sed -i "1idomain $DNSSUFFIX" /etc/resolv.conf
	
	#Samba information required for ksmb, regardless of winbind or not
	samba_domain=` < /tmp/netlogon/domain_information/domain_name`
	[[ -z $samba_domain ]] && exitfunc 1
	samba_domain_caps=`tr '[[:lower:]]' '[[:upper:]]' <<< "$samba_domain"`
	#Configure smb.conf
	sed -i "s/CHANGETHISDOMAIN/$samba_domain/g" /etc/samba/smb.conf
	sed -i "s/CHANGETHISSERVER/$PDC/g" /etc/samba/smb.conf
	sed -i "s/CHANGETHISREALM/$dns_domain_caps/g" /etc/samba/smb.conf
	
	#Check if we are to use winbind instead of LDAP
	if [[ -f /tmp/netlogon/domain_information/samba4_winbind ]]; then
		echo 60 >&1
		echo \#Configuring Samba >&11
		DOMAINTYPE=samba4_winbind
		DOMAIN=$samba_domain_caps
		
		#Create folder for users
		[[ ! -d /home/$samba_domain_caps ]] && mkdir /home/$samba_domain_caps
		function exitfunc {
			info_alert "Error" "Not joining domain - system may be in an inconsistent state"
			umount /tmp/netlogon
			exit 1
		}
		#Join domain
		echo 70 >&11
		echo \#Joining domain >&11
		join_status=1
		while [[ $join_status -ne 0 ]]; do
			understandableYad "--form --title='Domain Access' --wrap \
								--text 'Enter in a username and password to join the domain' --field='Username' --field='Password':H \
								--button='gtk-cancel:1' --button='gtk-ok:0' "
			domain_username=`cut -d"|" -f1 <<< "$DATA"`
			domain_password=`cut -d"|" -f2 <<< "$DATA"`
			net ads join -S $PDC -U $domain_username%$domain_password
			join_status=$?
		done
		
		echo 75 >&11
		echo \#Finalising domain configuration >&11
		
		#Update nsswitch.conf
		nss_enable passwd winbind
		nss_enable group winbind
		nss_enable shadow winbind
		#Update PAM
		pam-auth-update --remove winbind
		pam-auth-update --package
		#Restart winbind
		service winbind restart
	else
		DOMAINTYPE=samba4
		domain_sid=` < /tmp/netlogon/domain_information/domain_sid`
		ldap_base=` < /tmp/netlogon/domain_information/ldap_base`
		[[ -z $domain_sid ]] && exitfunc 1
		#Configure nslcd.conf
		sed -i "s/CHANGETHISSERVER/$PDC.$DNSSUFFIX/g" /etc/nslcd.conf
		sed -i "s/CHANGETHISSID/$domain_sid/g" /etc/nslcd.conf
		sed -i "s/CHANGETHISLDAPBASE/$ldap_base/g" /etc/nslcd.conf
		
		echo 75 >&11
		echo \#Finalising domain configuration >&11
		
		#Update nsswitch.conf
		nss_enable passwd ldap
		nss_enable group ldap
		nss_enable shadow ldap
		#Update PAM - bit of a hack, removes the 'seen' entry of the pam
		# module, causing it to be reconfigured into pam.d
		pam-auth-update --remove krb5
		pam-auth-update --package
		#Restart nslcd and nscd
		service nslcd restart
		service nscd restart
	fi
else
	#Using a Samba3 domain
	samba_domain=` < /tmp/netlogon/domain_information/domain_name`
	[[ -z $samba_domain ]] && exitfunc 1
	#Copy files and change variables
	samba_domain_caps=`tr 'a-z' 'A-Z' <<< "$samba_domain"`
	DOMAIN=$samba_domain_caps
	DOMAINTYPE=samba3
	
	echo 55 >&11
	echo \#Copying files >&11
	cp -rf /opt/karoshi/linuxclientsetup/config-files/common/* /
	cp -rf /opt/karoshi/linuxclientsetup/config-files/samba3/* /
	#Configure smb.conf
	sed -i "s/CHANGETHISDOMAIN/$samba_domain/g" /etc/samba/smb.conf
	sed -i "s/CHANGETHISPDC/$PDC/g" /etc/samba/smb.conf
	
	#Create folder for users
	[[ ! -d /home/$samba_domain_caps ]] && mkdir /home/$samba_domain_caps
	function exitfunc {
		info_alert "Error" "Not joining domain - system may be in an inconsistent state"
		umount /tmp/netlogon
		exit 1
	}
	#Join domain
	echo 70 >&11
	echo \#Joining domain >&11
	join_status=1
	while [[ $join_status -ne 0 ]]; do
		understandableYad "--form --title='Domain Access' --wrap \
							--text 'Enter in a username and password to join the domain' --field='Username' --field='Password':H \
							--button='gtk-cancel:1' --button='gtk-ok:0' "
		domain_username=`cut -d"|" -f1 <<< "$DATA"`
		domain_password=`cut -d"|" -f2 <<< "$DATA"`
		net rpc join -S $PDC -U $domain_username%$domain_password
		join_status=$?
	done
	
	echo 75 >&11
	echo \#Finalising domain configuration >&11
	
	#Update nsswitch.conf
	nss_enable passwd winbind
	nss_enable group winbind
	nss_enable shadow winbind
	#Update PAM - see above for rationale
	pam-auth-update --remove winbind
	pam-auth-update --package
	#Restart winbind
	service winbind restart
fi
####################
#End of domain setup
####################

echo 80 >&11
echo \#Finalising network configuration >&11

#Set NTP settings
sed -i "s/### KAROSHI HOOK ###/server $PDC.$DNSSUFFIX/" /etc/ntp.conf

#Last few variables
updateHostname

#Restart networking and finish
echo 90 >&11
umount /tmp/netlogon
function exitfunc {
	info_alert "Configuration" "Configuration cancelled"
	exit $1
}
echo 95 >&11
echo \#Restarting network interface >&11
ifdown $NETWORKINT
ifup $NETWORKINT

karoshi-manage-flags set domainset
echo 100 >&11

#Write new variables to file
updateVariables

exit 0

