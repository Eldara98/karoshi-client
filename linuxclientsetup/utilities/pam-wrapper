#!/bin/bash

#Copyright (C) 2013 Robin McCorkell
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted either at mpsharrad@karoshi.org.uk or rmccorkell@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

export PAM_SUCCESS=0 #Successful completion.
export PAM_OPEN_ERR=1 #Failure when dynamically loading a service module.
export PAM_SYMBOL_ERR=2 #Symbol not found in service module.
export PAM_SERVICE_ERR=3 #Error in underlying service module.
export PAM_SYSTEM_ERR=4 #System error.
export PAM_BUF_ERR=5 #Memory buffer error.
export PAM_CONV_ERR=6 #Conversation failure.
export PAM_PERM_DENIED=7 #The caller does not possess the required authority.
export PAM_MAXTRIES=8 #Maximum number of tries exceeded.
export PAM_AUTH_ERR=9 #Authentication error.
export PAM_NEW_AUTHTOK_REQD=10 #New authentication token required from user.
export PAM_CRED_INSUFFICIENT=11 #Cannot access authentication database because credentials supplied are insufficient.
export PAM_AUTHINFO_UNAVAIL=12 #Cannot retrieve authentication information.
export PAM_USER_UNKNOWN=13 #The user is not known to the underlying account management module.
export PAM_CRED_UNAVAIL=14 #Cannot retrieve user credentials.
export PAM_CRED_EXPIRED=15 #User credentials have expired.
export PAM_CRED_ERR=16 #Failure setting user credentials.
export PAM_ACCT_EXPIRED=17 #User account has expired.
export PAM_AUTHTOK_EXPIRED=18 #Password expired and no longer usable.
export PAM_SESSION_ERR=19 #Cannot initiate/terminate a PAM session.
export PAM_AUTHTOK_ERR=20 #Error in manipulating authentication token.
export PAM_AUTHTOK_RECOVERY_ERR=21 #Old authentication token cannot be recovered.
export PAM_AUTHTOK_LOCK_BUSY=22 #The authentication token lock is busy.
export PAM_AUTHTOK_DISABLE_AGING=23 #Authentication token ageing is disabled.
export PAM_NO_MODULE_DATA=24 #Module data not found.
#export PAM_IGNORE=25 #Ignore this module.
export PAM_IGNORE=0 #pam_exec only supports exit code 0 as non-error
export PAM_ABORT=26 #General PAM failure.
export PAM_TRY_AGAIN=27 #Unable to complete operation. Try again.
export PAM_MODULE_UNKNOWN=28 #Module type unknown.
export PAM_DOMAIN_UNKNOWN=29

function usage {
	echo "Usage:" >&2
	echo "	$0 [<options>] <command> [<command-options>]" >&2
	echo >&2
	echo " Options:" >&2
	echo "  --event=<pam-event>		Only execute on PAM_TYPE of <pam-event>" >&2
	echo "  --drop-privilages		Drop privilages to PAM_USER" >&2
	echo "  --						Do not parse further arguments as options" >&2
	exit $PAM_SERVICE_ERR
}

#Get options
drop_priv=false
force_command_option=false
is_command_set=false
command_options=( )
while (( "$#" )); do
	if $force_command_option; then
		if $is_command_set; then
			command_options+=("$1")
		else
			command=$1
		fi
	else
		case "$1" in
		--event=?*)
			pam_event=${1:8}
			;;
		--drop-privilages)
			drop_priv=true
			;;
		--help)
			usage
			;;
		--)
			force_command_option=true
			;;
		*)
			if $is_command_set; then
				command_options+=("$1")
			else
				command=$1
			fi
			;;
		esac
	fi
	
	shift
done

if ! [[ $command ]]; then
	echo "ERROR: No command specified" >&2
	usage
fi

#Make sure command is valid
if ! ( which "$command" >/dev/null || [[ -x $command ]] ); then
	echo "ERROR: $command is not an executable file or a command" >&2
	exit $PAM_SYSTEM_ERR
fi

#Needs to be root and running through PAM
if [[ $EUID -ne 0 ]]; then
	echo "ERROR: Must be run as root" >&2
	exit $PAM_PERM_DENIED
fi
if [[ ! $PAM_USER ]]; then
	echo "ERROR: Must be run through pam_exec.so" >&2
	exit $PAM_CRED_UNAVAIL
fi

#Fix relative path commands
if ! which "$command" >/dev/null; then
	command=./$command
fi

#Make sure the PAM_TYPE is correct
if [[ $pam_event ]] && [[ $PAM_TYPE != $pam_event ]]; then
	exit $PAM_IGNORE
fi

#Actually run
if $drop_priv; then
	#Make sure the user exists
	if ! getent passwd "$PAM_USER" >/dev/null; then
		echo "ERROR: Attempted to drop privilages to a non-existent user" >&2
		exit $PAM_USER_UNKNOWN
	fi
	#Make sure this isn't being run by sudo in the first place
	if [[ $PAM_SERVICE == "sudo" ]]; then
		echo "ERROR: Attempted to use sudo from a sudo-invoked PAM-script" >&2
		exit $PAM_IGNORE
	fi
	sudo -E -H -n -u "$PAM_USER" -- "$command" "${command_options[@]}"
else
	"$command" "${command_options[@]}"
fi
