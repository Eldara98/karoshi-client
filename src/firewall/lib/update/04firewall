#!/bin/bash
# @makefile_in@

#Copyright (C) 2013 Robin McCorkell

#This file is part of Karoshi Client.
#
#Karoshi Client is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Client is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Client.  If not, see <http://www.gnu.org/licenses/>.

###########################
#Configure firewall
###########################
echo "Configuring firewall"
#Reset firewall to defaults
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -F
iptables -X

#Create and configure log deny chains
iptables -N LOGDROP
iptables -N LOGREJECT

iptables -A LOGDROP -j LOG
iptables -A LOGREJECT -j LOG

iptables -A LOGDROP -j DROP
iptables -A LOGREJECT -j REJECT

#Create Karoshi chains
iptables -N karoshi-local #Local rules
iptables -N karoshi-domain #Domain rules
#iptables -N karoshi-auto #Auto-generated rules

#Add rules to INPUT chain
iptables -A INPUT -i lo -j ACCEPT #Allow all traffic on lo
iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT #Allow established connections
[[ -e /tmp/netlogon/client_settings/firewall/no_ping ]] || iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT #Permit pings
iptables -A INPUT -j karoshi-local
iptables -A INPUT -j karoshi-domain
#iptables -A INPUT -j karoshi-auto
[[ -e /tmp/netlogon/client_settings/firewall/drop_deny ]] || iptables -A INPUT -j REJECT #Reject all other packets

#Firewall rule processing
deny_target="LOGREJECT"
[[ -e /tmp/netlogon/client_settings/firewall/drop_deny ]] && deny_target="LOGDROP"
function process_rules {
	# $1 = file to process
	# $2 = iptables chain
	[[ $1 ]] || return
	if ! [[ -f $1 ]]; then
		echo "ERROR: Firewall rule processing: rule file $1 does not exist" >&2
		return
	fi
	[[ $2 ]] || return
	if ! iptables -n --list "$2" >/dev/null; then
		echo "ERROR: Firewall rule processing: chain $2 does not exist" >&2
		return
	fi

	(( line_no = 0 ))
	while read -r action protocol port source; do
		(( ++line_no ))
		if [[ $action ]] && [[ $action != \#* ]]; then
			rule=( )

			#Protocol
			case "$protocol" in
			all|any)
				;;
			*)
				if getent protocols "$protocol" >/dev/null; then
					rule+=( -p "$protocol" )
				else
					echo "$1:$line_no: Invalid protocol - $protocol" >&2
					continue
				fi
				;;
			esac

			#Port
			case "$port" in
			all|any)
				;;
			*)
				if getent services "$port" >/dev/null || ( [[ $port -gt 0 ]] && [[ $port -lt 65535 ]] ); then
					if ! ( [[ $protocol == "tcp" ]] || [[ $protocol == "udp" ]] ); then
						echo "$1:$line_no: Port option requires TCP or UDP protocol" >&2
						continue
					fi
					rule+=( --dport $port )
				else
					echo "$1:$line_no: Invalid port - $port" >&2
					continue
				fi
				;;
			esac

			#Source
			case "$source" in
			any|all|"")
				;;
			*)
				rule+=( --source "$source" )
				;;
			esac

			#Action
			case "$action" in
			allow)
				rule+=( -j ACCEPT )
				;;
			deny)
				rule+=( -j "$deny_target" )
				;;
			*)
				echo "$1:$line_no: Invalid action - $action" >&2
				continue
				;;
			esac

			#Commit rule
			iptables -A "$2" "${rule[@]}"
		fi
	done < "$1"
}

[[ -f /tmp/netlogon/client_settings/firewall/rules ]] && process_rules /tmp/netlogon/client_settings/firewall/rules karoshi-domain
[[ -f /opt/karoshi/firewall_rules ]] && process_rules /opt/karoshi/firewall_rules karoshi-local

##Generate auto rules
#echo "Performing auto-generation of firewall rules"
#karoshi-generate-firewall-rules

#Set default policies - done last to prevent connection dropouts
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT
